#! /usr/bin/python
#
#  USGS Preliminary Computer Program: n3class.py
#  Written by: Eric B. Wolf
#  Written in: Python 2.6 + GDAL/OGR 1.6
#  Program ran on: Windows XP SP3
#
#  DISCLAIMER: Although this program has been used by the USGS, no warranty, 
#  expressed or implied, is made by the USGS or the United States Government 
#  as to the accuracy and functioning of the program and related program 
#  material nor shall the fact of distribution constitute any such warranty, 
#  and no responsibility is assumed by the USGS in connection therewith.
#
#  Uses OGR to read the feature attributes and geometry.
#  Attributes are encoded as literals relying on the types from the table.
#  Shape geometry is stored as hasGeometry: <GML>
#

class N3:
    def __init__(self):
        self.n3class = ""
        self.headings = []
        self.labels = []
        
    def write_headers(self, inLyr, outFp):
        from osgeo import ogr
        from osgeo import gdal

        import sys
        import string


        outFp.write("# Notation 3 formatted triples generated by shp2n3.py\n")

        inLyr.ResetReading()
        
        # Get the first feature - we don't care about the details, just the schema
        feat = inLyr.GetNextFeature()

        feat_defn = inLyr.GetLayerDefn()

        self.n3class = feat_defn.GetName()

        # RDF Schema always generated
        
        # RESOLVE: This is custom right now...
        outFp.write("@prefix :        <http://cegis.usgs.gov/ontology/0.1/"+self.n3class+".owl#> .\n")
            
        outFp.write("@prefix owl:     <http://www.w3.org/2002/07/owl#> .\n")
        outFp.write("@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n")
        outFp.write("@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .\n")
        outFp.write("@prefix gmlr:    <http://www.opengis.net/gml/3.2/rdf#> .\n")
        outFp.write("@prefix ogc:     <http://www.opengis.net/ogc#> .\n")
        outFp.write("@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .\n\n")

        outs = ":"+self.n3class+"\n"
        outFp.write(outs)
        outFp.write("      rdf:type owl:Class .\n\n")

        # Loop through the fields, getting the schema information
        labels = []
        
        for i in range(0,feat_defn.GetFieldCount()):
            fd = feat_defn.GetFieldDefn(i)
            h = fd.GetNameRef()
            self.labels.append(h) # raw heading field
            
            # Remove unacceptable characters
            for j in range(0,len(h)):
                if h[j] not in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_":
                    h = h[:j] + "_" + h[j+1:]

            h = h[:1].lower() + h[1:] # Predicates initial lower case 
            self.headings.append(h)

            outs = ""
            outs += ":" + h + "\n"
            outs += "      rdf:type owl:DatatypeProperty ;\n"
            outs += "      rdfs:domain :" + self.n3class + " ;\n"
            outs += '      rdfs:label "' + self.labels[i] + '"^^xsd:string ;\n'
            if (fd.GetType() == ogr.OFTInteger):
                outs += "      rdfs:range xsd:integer .\n"
            elif (fd.GetType() == ogr.OFTReal):
                outs += "      rdfs:range xsd:double .\n"
            elif (fd.GetType() == ogr.OFTDate):
                outs += "      rdfs:range xsd:date .\n"
            elif (fd.GetType() == ogr.OFTTime):
                outs += "      rdfs:range xsd:time .\n"
            elif (fd.GetType() == ogr.OFTDateTime):
                outs += "      rdfs:range xsd:dateTime .\n"
            else:  # Otherwise, make it a string
                outs += "      rdfs:range xsd:string .\n"

            outs += "\n";

            outFp.write(outs)

        outs = ""

        # Resolve: This is custom right now - need to make it different!
        #outs += "<http://cegis.usgs.gov/ontology/0.1/" + self.n3class +".owl#>\n"
        #outs += "      rdf:type owl:Ontology ;\n"
        #outs += '      owl:versionInfo "Created with shp2n3.py"^^xsd:string .\n\n'
        #outFp.write(outs)
        
    # End: function write_headers()
        
        
    # write_triples
    #
    #  Loops through the features, writing out the attribute data as triples and the geometry as GML
    #
    def write_triples(self, inLyr, outFp):
        from osgeo import ogr
        from osgeo import gdal

        import sys
        import string

        # Prepare to start reading features
        inLyr.ResetReading()

        feat = inLyr.GetNextFeature()

        # Record count
        rc = 0
        
        # Loop through features
        while feat is not None:
            rc = rc + 1

            ld = inLyr.GetLayerDefn()

            # assign an arbitrary ID tag to this instance
            outs = ":_" + str(rc) + "\n"
            outs += "      rdf:type :" +self.n3class +" ;\n"
            outs += '      rdfs:label "' + str(rc) + '"^^xsd:string ;\n'
            outFp.write(outs)
            outs = ""
            
            for i in range (ld.GetFieldCount()):
                fd = ld.GetFieldDefn(i)

                v = feat.GetFieldAsString(i)
                v = v.strip()
                outs = ""
                
                # Write triple based on field type
                if (fd.GetType() == ogr.OFTInteger):
                    outs += '      :%s "%s"^^xsd:integer ' % (self.headings[i], v)
                elif (fd.GetType() == ogr.OFTReal):
                    outs += '      :%s "%s"^^xsd:double ' % (self.headings[i], v)
                elif (fd.GetType() == ogr.OFTDate):
                    outs += '      :%s "%s"^^xsd:date ' % (self.headings[i], v)
                elif (fd.GetType() == ogr.OFTTime):
                    outs += '      :%s "%s"^^xsd:time ' % (self.headings[i], v)
                elif (fd.GetType() == ogr.OFTDateTime):
                    outs += '      :%s "%s"^^xsd:dateTime ' % (self.headings[i], v)
                else:  # Otherwise, make it a string
                    outs += '      :%s "%s"^^xsd:string ' % (self.headings[i], v)
                    
                outs += ";\n"
                
                outFp.write(outs)
                
            # End: loop through fields
            
            # After the fields, deal with the geometry
            geom = feat.GetGeometryRef()
                        
            if geom is not None:
                dimn = geom.GetDimension()
                outs = '      ogc:dimension "' + str(dimn) + '"^^xsd:integer '
                outs += ";\n"
                outFp.write(outs)

                # Treats everything a 2D
                outs = '      ogc:is3D "false"^^xsd:boolean '
                outs += ";\n"
                outFp.write(outs)
                
                if (geom.IsSimple()):
                    outs = '      ogc:isSimple "true"^^xsd:boolean '
                else:
                    outs = '      ogc:isSimple "false"^^xsd:boolean '
                outs += ";\n"
                outFp.write(outs)

                if (geom.IsEmpty()):
                    outs = '      ogc:isEmpty "true"^^xsd:boolean '
                else:
                    outs = '      ogc:isEmpty "false"^^xsd:boolean '
                outs += ";\n"
                outFp.write(outs)
                
                
                env = geom.GetEnvelope()
                
                outs  =  '      ogc:envelope "'
                outs +=  '<gml:Envelope>'
                outs +=  '<gml:lowerCorner>' + str(env[0]) + ' ' + str(env[2]) + '</gml:lowerCorner>'
                outs +=  '<gml:upperCorner>' + str(env[1]) + ' ' + str(env[3]) + '</gml:upperCorner>'
                outs +=  '</gml:Envelope>"^^ogc:GMLType '
                outs += ";\n"
                outFp.write(outs)
                
                gml = geom.ExportToGML()
                outs = '      ogc:hasGML "' + gml + '"^^ogc:gmlType '
                outs += ".\n"
                outFp.write(outs)
                
            else:
                print "Can't get geometry!"
                print "GDAL Error: " + gdal.GetLastErrorMsg()
                
            outFp.write("\n\n")
                        
            feat = inLyr.GetNextFeature()
            
        # End: loop through features

        outs = "# Total number of records:" + str(rc) + "\n"
        outFp.write(outs)
        
    # End: function write_triples()
